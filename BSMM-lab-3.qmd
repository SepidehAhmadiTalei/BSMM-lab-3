---
title: "BSMM-lab-3"
subtitle: "BSMM 8740 Fall 2023"
author: "Sepideh AhmadiTalei"
date: "October 04, 2023"
format: html
editor: visual
self-contained: true
---

## Setup

Load packages and data:

```{r install and load packages}
install.packages("skimr")
install.packages("janitor")
library(magrittr)   # the pipe
library(tidyverse)  # for data wrangling + visualization
library(tidymodels) # for modeling
library(gt)         # for pretty tables
library(dplyr)
library(tidyr)
library(skimr)
```

```{r load-pkg-data}
#| message: false
boston_cocktails <- readr::read_csv('data/boston_cocktails.csv')
```

## Exercises

### Exercise 1

```{r assessing the quality of the dataset}
skimr::skim(boston_cocktails)
```

```{r assessing the quality of the dataset}
boston_cocktails %>% DataExplorer::introduce()
```

```{r reviewing summary of the dataset}
boston_cocktails %>% summary()
```

The median measure amount across across all cocktails is \_\_*1.0*\_.

### Exercise 2

```{r select certain columns}
selected_columns <- boston_cocktails %>% 
  select(name, category, ingredient, measure_number)
```

```{r creating columns for each ingredient}
pivoted_data <- selected_columns %>% 
  pivot_wider(
    names_from = ingredient,
    values_from = measure_number,
    values_fill = 0
  )

pivoted_data
```

```{r cleaning the name of columns}
pivoted_data %>% 
  janitor::clean_names()
```

```{r removing rows with NA value}
cleaned_data <- na.omit(pivoted_data)
```

```{r filtering data for certain name}
cleaned_data %>% 
  select(name, gin) %>% 
  filter(name == "Leap Frog Highball")
```

The **Leap Frog Highball** contains \_*2*\_oz of gin

### Exercise 3

```{r}
library(recipes)
rec <- recipes::recipe(~ ., data = cleaned_data) %>%
   update_role(name, category, new_role = "id")

basic_cleaned <- rec %>%
  # Standardize the values
  recipes::step_select(where(is.numeric)) %>%
  recipes::step_normalize(all_predictors())
```

```{r}
pca <- basic_cleaned  %>% 
  recipes::step_pca(
    recipes::all_predictors()
    , threshold = .9
  )
```

```{r Prepare the data}
pca %<>% recipes::prep() 
```

```{r}
prepared_data  <- recipes::bake(pca, new_data = NULL)
```

```{r Getting a summary}
summary(prepared_data)
```

```{r}
pca
```

\_40\_ predictor variables are prepped by the recipe.

### Exercise 4

```{r}
recipes::tidy(basic_cleaned)
```

```{r}
recipes::tidy(basic_cleaned,2)
```

```{r Finding the ingredient with the highest frequency}
ingredient_usage <- colMeans(cleaned_data[, -c(1, 2)])  # Exclude 'name' and 'category' columns
most_used_ingredient <- names(ingredient_usage)[which.max(ingredient_usage)]

most_used_ingredient
```

On average the most used ingredient in the Boston Cocktails dataset is \_*gin*\_.

### Exercise 5

```{r load the required libraries}
library(recipes)
library(ggplot2)
```

```{r}
pca_result <- recipes::tidy(prepared_data, 2)
```

```{r}
components_to_plot <- c("PC1", "PC2", "PC3", "PC4", "PC5")

pca_result_filtered <- pca_result %>%
  filter(column == "PC01" | column =="PC02" |column =="PC03" | column =="PC04"| column =="PC05")
```

```{r}
colnames(pca_result_filtered )[1] ="component"
```

```{r}
pca_result_filtered %>%
  mutate(terms = forcats::fct_inorder(components_to_plot))
```

```{r}
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL) +
theme(axis.text=element_text(size=7),
      axis.title=element_text(size=14,face="bold"))

```

Describe describe the drinks represented by PC1?

### Exercise 6

```{r}
pca_result_filtered2 <- pca_result %>%
  filter(column == "PC01" | column =="PC02" |column =="PC03" | column =="PC04")
```

```{r}
top_ingredients <- pca_result_filtered2 %>%
  arrange(terms, desc(abs(value))) %>%
  group_by(terms) %>%
  slice_max(order_by = abs(value), n = 8)

```

```{r  generating a table}
top_ingredients_table <- top_ingredients %>%
  gt()

```

The characteristic alcoholic beverage of each of the first 4 principle components is \_\_\_.

### Exercise 7

```{r}
pca_recipe <- recipe(~ ., data = boston_cocktails) %>%
  step_rm(name, category) %>%  # Remove name and category columns
  step_normalize(all_predictors()) %>%  # Normalize predictors
  step_pca(all_predictors(), num_comp = 2)  # Perform PCA with 2 components

```

```{r}
prepped_data <- prep(pca_recipe) %>%
  juice()
```

```{r}
ggplot(aes(PC1, PC2, label = name)) +
  geom_point(aes(color = category), alpha = 0.7, size = 2) +
  geom_text(check_overlap = TRUE, hjust = "inward") + 
  labs(color = NULL)
```

How would you interpret the results of a PCA analysis for a client?
